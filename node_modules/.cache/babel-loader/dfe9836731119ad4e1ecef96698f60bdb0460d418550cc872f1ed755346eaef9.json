{"ast":null,"code":"// Oracledb Client\n// -------\nconst each = require('lodash/each');\nconst flatten = require('lodash/flatten');\nconst isEmpty = require('lodash/isEmpty');\nconst map = require('lodash/map');\nconst Formatter = require('../../formatter');\nconst QueryCompiler = require('./query/oracledb-querycompiler');\nconst TableCompiler = require('./schema/oracledb-tablecompiler');\nconst ColumnCompiler = require('./schema/oracledb-columncompiler');\nconst {\n  BlobHelper,\n  ReturningHelper,\n  monkeyPatchConnection\n} = require('./utils');\nconst ViewCompiler = require('./schema/oracledb-viewcompiler');\nconst ViewBuilder = require('./schema/oracledb-viewbuilder');\nconst Transaction = require('./transaction');\nconst Client_Oracle = require('../oracle');\nconst {\n  isString\n} = require('../../util/is');\nconst {\n  outputQuery,\n  unwrapRaw\n} = require('../../formatter/wrappingFormatter');\nconst {\n  compileCallback\n} = require('../../formatter/formatterUtils');\nclass Client_Oracledb extends Client_Oracle {\n  constructor(config) {\n    super(config);\n    if (this.driver) {\n      process.env.UV_THREADPOOL_SIZE = process.env.UV_THREADPOOL_SIZE || 1;\n      process.env.UV_THREADPOOL_SIZE = parseInt(process.env.UV_THREADPOOL_SIZE) + this.driver.poolMax;\n    }\n  }\n  _driver() {\n    const client = this;\n    const oracledb = require('oracledb');\n    client.fetchAsString = [];\n    if (this.config.fetchAsString && Array.isArray(this.config.fetchAsString)) {\n      this.config.fetchAsString.forEach(function (type) {\n        if (!isString(type)) return;\n        type = type.toUpperCase();\n        if (oracledb[type]) {\n          if (type !== 'NUMBER' && type !== 'DATE' && type !== 'CLOB' && type !== 'BUFFER') {\n            this.logger.warn('Only \"date\", \"number\", \"clob\" and \"buffer\" are supported for fetchAsString');\n          }\n          client.fetchAsString.push(oracledb[type]);\n        }\n      });\n    }\n    return oracledb;\n  }\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  viewBuilder() {\n    return new ViewBuilder(this, ...arguments);\n  }\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n  prepBindings(bindings) {\n    return map(bindings, value => {\n      if (value instanceof BlobHelper && this.driver) {\n        return {\n          type: this.driver.BLOB,\n          dir: this.driver.BIND_OUT\n        };\n        // Returning helper always use ROWID as string\n      } else if (value instanceof ReturningHelper && this.driver) {\n        return {\n          type: this.driver.STRING,\n          dir: this.driver.BIND_OUT\n        };\n      } else if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      return value;\n    });\n  }\n\n  // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n  parameter(value, builder, formatter) {\n    if (typeof value === 'function') {\n      return outputQuery(compileCallback(value, undefined, this, formatter), true, builder, this);\n    } else if (value instanceof BlobHelper) {\n      formatter.bindings.push(value.value);\n      return '?';\n    }\n    return unwrapRaw(value, true, builder, this, formatter) || '?';\n  }\n\n  // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n  acquireRawConnection() {\n    const client = this;\n    const asyncConnection = new Promise(function (resolver, rejecter) {\n      // If external authentication don't have to worry about username/password and\n      // if not need to set the username and password\n      const oracleDbConfig = client.connectionSettings.externalAuth ? {\n        externalAuth: client.connectionSettings.externalAuth\n      } : {\n        user: client.connectionSettings.user,\n        password: client.connectionSettings.password\n      };\n\n      // In the case of external authentication connection string will be given\n      oracleDbConfig.connectString = resolveConnectString(client.connectionSettings);\n      if (client.connectionSettings.prefetchRowCount) {\n        oracleDbConfig.prefetchRows = client.connectionSettings.prefetchRowCount;\n      }\n      if (client.connectionSettings.stmtCacheSize !== undefined) {\n        oracleDbConfig.stmtCacheSize = client.connectionSettings.stmtCacheSize;\n      }\n      client.driver.fetchAsString = client.fetchAsString;\n      client.driver.getConnection(oracleDbConfig, function (err, connection) {\n        if (err) {\n          return rejecter(err);\n        }\n        monkeyPatchConnection(connection, client);\n        resolver(connection);\n      });\n    });\n    return asyncConnection;\n  }\n\n  // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n  destroyRawConnection(connection) {\n    return connection.release();\n  }\n\n  // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const options = {\n      autoCommit: false\n    };\n    if (obj.method === 'select') {\n      options.resultSet = true;\n    }\n    return connection.executeAsync(obj.sql, obj.bindings, options).then(async function (response) {\n      // Flatten outBinds\n      let outBinds = flatten(response.outBinds);\n      obj.response = response.rows || [];\n      obj.rowsAffected = response.rows ? response.rows.rowsAffected : response.rowsAffected;\n\n      //added for outBind parameter\n      if (obj.method === 'raw' && outBinds.length > 0) {\n        return {\n          response: outBinds\n        };\n      }\n      if (obj.method === 'update') {\n        const modifiedRowsCount = obj.rowsAffected.length || obj.rowsAffected;\n        const updatedObjOutBinding = [];\n        const updatedOutBinds = [];\n        const updateOutBinds = i => function (value, index) {\n          const OutBindsOffset = index * modifiedRowsCount;\n          updatedOutBinds.push(outBinds[i + OutBindsOffset]);\n        };\n        for (let i = 0; i < modifiedRowsCount; i++) {\n          updatedObjOutBinding.push(obj.outBinding[0]);\n          each(obj.outBinding[0], updateOutBinds(i));\n        }\n        outBinds = updatedOutBinds;\n        obj.outBinding = updatedObjOutBinding;\n      }\n      if (!obj.returning && outBinds.length === 0) {\n        if (!connection.isTransaction) {\n          await connection.commitAsync();\n        }\n        return obj;\n      }\n      const rowIds = [];\n      let offset = 0;\n      for (let line = 0; line < obj.outBinding.length; line++) {\n        const ret = obj.outBinding[line];\n        offset = offset + (obj.outBinding[line - 1] ? obj.outBinding[line - 1].length : 0);\n        for (let index = 0; index < ret.length; index++) {\n          const out = ret[index];\n          await new Promise(function (bindResolver, bindRejecter) {\n            if (out instanceof BlobHelper) {\n              const blob = outBinds[index + offset];\n              if (out.returning) {\n                obj.response[line] = obj.response[line] || {};\n                obj.response[line][out.columnName] = out.value;\n              }\n              blob.on('error', function (err) {\n                bindRejecter(err);\n              });\n              blob.on('finish', function () {\n                bindResolver();\n              });\n              blob.write(out.value);\n              blob.end();\n            } else if (obj.outBinding[line][index] === 'ROWID') {\n              rowIds.push(outBinds[index + offset]);\n              bindResolver();\n            } else {\n              obj.response[line] = obj.response[line] || {};\n              obj.response[line][out] = outBinds[index + offset];\n              bindResolver();\n            }\n          });\n        }\n      }\n      if (connection.isTransaction) {\n        return obj;\n      }\n      await connection.commitAsync();\n      if (obj.returningSql) {\n        const response = await connection.executeAsync(obj.returningSql(), rowIds, {\n          resultSet: true\n        });\n        obj.response = response.rows;\n      }\n      return obj;\n    });\n  }\n\n  // Process the response as returned from the query.\n  processResponse(obj, runner) {\n    const {\n      response\n    } = obj;\n    if (obj.output) {\n      return obj.output.call(runner, response);\n    }\n    switch (obj.method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, obj.pluck);\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (obj.returning && !isEmpty(obj.returning)) {\n          return response;\n        } else if (obj.rowsAffected !== undefined) {\n          return obj.rowsAffected;\n        } else {\n          return 1;\n        }\n      default:\n        return response;\n    }\n  }\n  processPassedConnection(connection) {\n    monkeyPatchConnection(connection, this);\n  }\n}\nClient_Oracledb.prototype.driverName = 'oracledb';\nfunction resolveConnectString(connectionSettings) {\n  if (connectionSettings.connectString) {\n    return connectionSettings.connectString;\n  }\n  if (!connectionSettings.port) {\n    return connectionSettings.host + '/' + connectionSettings.database;\n  }\n  return connectionSettings.host + ':' + connectionSettings.port + '/' + connectionSettings.database;\n}\nmodule.exports = Client_Oracledb;","map":{"version":3,"names":["each","require","flatten","isEmpty","map","Formatter","QueryCompiler","TableCompiler","ColumnCompiler","BlobHelper","ReturningHelper","monkeyPatchConnection","ViewCompiler","ViewBuilder","Transaction","Client_Oracle","isString","outputQuery","unwrapRaw","compileCallback","Client_Oracledb","constructor","config","driver","process","env","UV_THREADPOOL_SIZE","parseInt","poolMax","_driver","client","oracledb","fetchAsString","Array","isArray","forEach","type","toUpperCase","logger","warn","push","queryCompiler","builder","formatter","tableCompiler","arguments","columnCompiler","viewBuilder","viewCompiler","transaction","prepBindings","bindings","value","BLOB","dir","BIND_OUT","STRING","parameter","undefined","acquireRawConnection","asyncConnection","Promise","resolver","rejecter","oracleDbConfig","connectionSettings","externalAuth","user","password","connectString","resolveConnectString","prefetchRowCount","prefetchRows","stmtCacheSize","getConnection","err","connection","destroyRawConnection","release","_query","obj","sql","Error","options","autoCommit","method","resultSet","executeAsync","then","response","outBinds","rows","rowsAffected","length","modifiedRowsCount","updatedObjOutBinding","updatedOutBinds","updateOutBinds","i","index","OutBindsOffset","outBinding","returning","isTransaction","commitAsync","rowIds","offset","line","ret","out","bindResolver","bindRejecter","blob","columnName","on","write","end","returningSql","processResponse","runner","output","call","pluck","processPassedConnection","prototype","driverName","port","host","database","module","exports"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/oracledb/index.js"],"sourcesContent":["// Oracledb Client\n// -------\nconst each = require('lodash/each');\nconst flatten = require('lodash/flatten');\nconst isEmpty = require('lodash/isEmpty');\nconst map = require('lodash/map');\n\nconst Formatter = require('../../formatter');\nconst QueryCompiler = require('./query/oracledb-querycompiler');\nconst TableCompiler = require('./schema/oracledb-tablecompiler');\nconst ColumnCompiler = require('./schema/oracledb-columncompiler');\nconst {\n  BlobHelper,\n  ReturningHelper,\n  monkeyPatchConnection,\n} = require('./utils');\nconst ViewCompiler = require('./schema/oracledb-viewcompiler');\nconst ViewBuilder = require('./schema/oracledb-viewbuilder');\nconst Transaction = require('./transaction');\nconst Client_Oracle = require('../oracle');\nconst { isString } = require('../../util/is');\nconst { outputQuery, unwrapRaw } = require('../../formatter/wrappingFormatter');\nconst { compileCallback } = require('../../formatter/formatterUtils');\n\nclass Client_Oracledb extends Client_Oracle {\n  constructor(config) {\n    super(config);\n    if (this.driver) {\n      process.env.UV_THREADPOOL_SIZE = process.env.UV_THREADPOOL_SIZE || 1;\n      process.env.UV_THREADPOOL_SIZE =\n        parseInt(process.env.UV_THREADPOOL_SIZE) + this.driver.poolMax;\n    }\n  }\n\n  _driver() {\n    const client = this;\n    const oracledb = require('oracledb');\n    client.fetchAsString = [];\n    if (this.config.fetchAsString && Array.isArray(this.config.fetchAsString)) {\n      this.config.fetchAsString.forEach(function (type) {\n        if (!isString(type)) return;\n        type = type.toUpperCase();\n        if (oracledb[type]) {\n          if (\n            type !== 'NUMBER' &&\n            type !== 'DATE' &&\n            type !== 'CLOB' &&\n            type !== 'BUFFER'\n          ) {\n            this.logger.warn(\n              'Only \"date\", \"number\", \"clob\" and \"buffer\" are supported for fetchAsString'\n            );\n          }\n          client.fetchAsString.push(oracledb[type]);\n        }\n      });\n    }\n    return oracledb;\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  viewBuilder() {\n    return new ViewBuilder(this, ...arguments);\n  }\n\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  prepBindings(bindings) {\n    return map(bindings, (value) => {\n      if (value instanceof BlobHelper && this.driver) {\n        return { type: this.driver.BLOB, dir: this.driver.BIND_OUT };\n        // Returning helper always use ROWID as string\n      } else if (value instanceof ReturningHelper && this.driver) {\n        return { type: this.driver.STRING, dir: this.driver.BIND_OUT };\n      } else if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      return value;\n    });\n  }\n\n  // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n  parameter(value, builder, formatter) {\n    if (typeof value === 'function') {\n      return outputQuery(\n        compileCallback(value, undefined, this, formatter),\n        true,\n        builder,\n        this\n      );\n    } else if (value instanceof BlobHelper) {\n      formatter.bindings.push(value.value);\n      return '?';\n    }\n    return unwrapRaw(value, true, builder, this, formatter) || '?';\n  }\n\n  // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n  acquireRawConnection() {\n    const client = this;\n    const asyncConnection = new Promise(function (resolver, rejecter) {\n      // If external authentication don't have to worry about username/password and\n      // if not need to set the username and password\n      const oracleDbConfig = client.connectionSettings.externalAuth\n        ? { externalAuth: client.connectionSettings.externalAuth }\n        : {\n            user: client.connectionSettings.user,\n            password: client.connectionSettings.password,\n          };\n\n      // In the case of external authentication connection string will be given\n      oracleDbConfig.connectString = resolveConnectString(\n        client.connectionSettings\n      );\n\n      if (client.connectionSettings.prefetchRowCount) {\n        oracleDbConfig.prefetchRows =\n          client.connectionSettings.prefetchRowCount;\n      }\n\n      if (client.connectionSettings.stmtCacheSize !== undefined) {\n        oracleDbConfig.stmtCacheSize = client.connectionSettings.stmtCacheSize;\n      }\n\n      client.driver.fetchAsString = client.fetchAsString;\n\n      client.driver.getConnection(oracleDbConfig, function (err, connection) {\n        if (err) {\n          return rejecter(err);\n        }\n        monkeyPatchConnection(connection, client);\n\n        resolver(connection);\n      });\n    });\n    return asyncConnection;\n  }\n\n  // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n  destroyRawConnection(connection) {\n    return connection.release();\n  }\n\n  // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const options = { autoCommit: false };\n    if (obj.method === 'select') {\n      options.resultSet = true;\n    }\n    return connection\n      .executeAsync(obj.sql, obj.bindings, options)\n      .then(async function (response) {\n        // Flatten outBinds\n        let outBinds = flatten(response.outBinds);\n        obj.response = response.rows || [];\n        obj.rowsAffected = response.rows\n          ? response.rows.rowsAffected\n          : response.rowsAffected;\n\n        //added for outBind parameter\n        if (obj.method === 'raw' && outBinds.length > 0) {\n          return {\n            response: outBinds,\n          };\n        }\n\n        if (obj.method === 'update') {\n          const modifiedRowsCount = obj.rowsAffected.length || obj.rowsAffected;\n          const updatedObjOutBinding = [];\n          const updatedOutBinds = [];\n          const updateOutBinds = (i) =>\n            function (value, index) {\n              const OutBindsOffset = index * modifiedRowsCount;\n              updatedOutBinds.push(outBinds[i + OutBindsOffset]);\n            };\n\n          for (let i = 0; i < modifiedRowsCount; i++) {\n            updatedObjOutBinding.push(obj.outBinding[0]);\n            each(obj.outBinding[0], updateOutBinds(i));\n          }\n          outBinds = updatedOutBinds;\n          obj.outBinding = updatedObjOutBinding;\n        }\n\n        if (!obj.returning && outBinds.length === 0) {\n          if (!connection.isTransaction) {\n            await connection.commitAsync();\n          }\n          return obj;\n        }\n        const rowIds = [];\n        let offset = 0;\n\n        for (let line = 0; line < obj.outBinding.length; line++) {\n          const ret = obj.outBinding[line];\n\n          offset =\n            offset +\n            (obj.outBinding[line - 1] ? obj.outBinding[line - 1].length : 0);\n\n          for (let index = 0; index < ret.length; index++) {\n            const out = ret[index];\n\n            await new Promise(function (bindResolver, bindRejecter) {\n              if (out instanceof BlobHelper) {\n                const blob = outBinds[index + offset];\n                if (out.returning) {\n                  obj.response[line] = obj.response[line] || {};\n                  obj.response[line][out.columnName] = out.value;\n                }\n                blob.on('error', function (err) {\n                  bindRejecter(err);\n                });\n                blob.on('finish', function () {\n                  bindResolver();\n                });\n                blob.write(out.value);\n                blob.end();\n              } else if (obj.outBinding[line][index] === 'ROWID') {\n                rowIds.push(outBinds[index + offset]);\n                bindResolver();\n              } else {\n                obj.response[line] = obj.response[line] || {};\n                obj.response[line][out] = outBinds[index + offset];\n                bindResolver();\n              }\n            });\n          }\n        }\n        if (connection.isTransaction) {\n          return obj;\n        }\n        await connection.commitAsync();\n        if (obj.returningSql) {\n          const response = await connection.executeAsync(\n            obj.returningSql(),\n            rowIds,\n            { resultSet: true }\n          );\n          obj.response = response.rows;\n        }\n        return obj;\n      });\n  }\n\n  // Process the response as returned from the query.\n  processResponse(obj, runner) {\n    const { response } = obj;\n    if (obj.output) {\n      return obj.output.call(runner, response);\n    }\n    switch (obj.method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, obj.pluck);\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (obj.returning && !isEmpty(obj.returning)) {\n          return response;\n        } else if (obj.rowsAffected !== undefined) {\n          return obj.rowsAffected;\n        } else {\n          return 1;\n        }\n      default:\n        return response;\n    }\n  }\n\n  processPassedConnection(connection) {\n    monkeyPatchConnection(connection, this);\n  }\n}\n\nClient_Oracledb.prototype.driverName = 'oracledb';\n\nfunction resolveConnectString(connectionSettings) {\n  if (connectionSettings.connectString) {\n    return connectionSettings.connectString;\n  }\n\n  if (!connectionSettings.port) {\n    return connectionSettings.host + '/' + connectionSettings.database;\n  }\n\n  return (\n    connectionSettings.host +\n    ':' +\n    connectionSettings.port +\n    '/' +\n    connectionSettings.database\n  );\n}\n\nmodule.exports = Client_Oracledb;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}