{"ast":null,"code":"var _jsxFileName = \"/Users/user/dig_develop/solo_project/src/components/List.jsx\",\n  _s = $RefreshSig$();\nimport \"../styles/list.css\";\nimport { React, useState, useEffect } from \"react\";\n// import React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = process.env.NODE_ENV === \"production\" ?\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\"https://choose-lunch-app.onrender.com\" :\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n\"http://localhost:8080\";\nexport const dataSort = () => {};\nexport const List = props => {\n  _s();\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = () => {\n    fetch(`${URL}/table`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(getData => {\n      allMenuSet(getData);\n      //allMenuをgetDataとする\n      //全てのオブジェクトが入った配列\n    });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n  const menuView = () => {\n    const elementsArr = [];\n    allMenu.forEach((menu, index) => {});\n    if (menu.isWaiting === true) {\n      elementsArr.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list\",\n          children: [\"menu lists\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: allMenu.map(menu => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: menu.menu\n            }, menu.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false));\n    }\n    return elementsArr;\n  };\n  const resultElements = menuView();\n  return resultElements;\n};\n_s(List, \"6o4bYFDdHbJtUE97qHbX3RnpaK0=\");\n_c = List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","process","env","NODE_ENV","dataSort","List","props","_s","allMenu","allMenuSet","getDataFunc","fetch","method","then","res","json","getData","menuView","elementsArr","forEach","menu","index","isWaiting","push","children","className","map","id","fileName","_jsxFileName","lineNumber","columnNumber","resultElements","_c","$RefreshReg$"],"sources":["/Users/user/dig_develop/solo_project/src/components/List.jsx"],"sourcesContent":["import \"../styles/list.css\";\nimport { React, useState, useEffect } from \"react\";\n// import React, { useState, useEffect, useRef } from \"react\";\nconst URL =\n  process.env.NODE_ENV === \"production\"\n    ? //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n      \"https://choose-lunch-app.onrender.com\"\n    : //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n      \"http://localhost:8080\";\n\nexport const dataSort = () => {};\n\nexport const List = (props) => {\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = () => {\n    fetch(`${URL}/table`, { method: \"GET\" })\n      .then((res) => res.json())\n      .then((getData) => {\n        allMenuSet(getData);\n        //allMenuをgetDataとする\n        //全てのオブジェクトが入った配列\n      });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n\n  const menuView = () => {\n    const elementsArr = [];\n    allMenu.forEach((menu, index) => {});\n    if (menu.isWaiting === true) {\n      elementsArr.push(\n        <>\n          <div className=\"list\">\n            menu lists\n            <ul>\n              {allMenu.map((menu) => (\n                <li key={menu.id}>{menu.menu}</li>\n              ))}\n            </ul>\n          </div>\n        </>\n      );\n    }\n    return elementsArr;\n  };\n  const resultElements = menuView();\n  return resultElements;\n};\n"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,SAASA,KAAK,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,GAAG,GACPC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;AACjC;AACA,uCAAuC;AACvC;AACA,uBAAuB;AAE7B,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,CAAC,CAAC;AAEhC,OAAO,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxBC,KAAK,CAAE,GAAEX,GAAI,QAAO,EAAE;MAAEY,MAAM,EAAE;IAAM,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,OAAO,IAAK;MACjBP,UAAU,CAACO,OAAO,CAAC;MACnB;MACA;IACF,CAAC,CAAC;EACN,CAAC;;EAED;;EAEA;EACArB,SAAS,CAAC,MAAM;IACde,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,WAAW,GAAG,EAAE;IACtBV,OAAO,CAACW,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK,CAAC,CAAC,CAAC;IACpC,IAAID,IAAI,CAACE,SAAS,KAAK,IAAI,EAAE;MAC3BJ,WAAW,CAACK,IAAI,eACd1B,OAAA,CAAAE,SAAA;QAAAyB,QAAA,eACE3B,OAAA;UAAK4B,SAAS,EAAC,MAAM;UAAAD,QAAA,GAAC,YAEpB,eAAA3B,OAAA;YAAA2B,QAAA,EACGhB,OAAO,CAACkB,GAAG,CAAEN,IAAI,iBAChBvB,OAAA;cAAA2B,QAAA,EAAmBJ,IAAI,CAACA;YAAI,GAAnBA,IAAI,CAACO,EAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAiB,CAClC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC,gBACN,CACJ,CAAC;IACH;IACA,OAAOb,WAAW;EACpB,CAAC;EACD,MAAMc,cAAc,GAAGf,QAAQ,CAAC,CAAC;EACjC,OAAOe,cAAc;AACvB,CAAC;AAACzB,EAAA,CA1CWF,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}