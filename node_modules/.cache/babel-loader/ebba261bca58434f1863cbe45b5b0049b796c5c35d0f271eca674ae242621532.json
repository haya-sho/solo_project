{"ast":null,"code":"const ColumnCompiler_Oracle = require('../../oracle/schema/oracle-columncompiler');\nconst {\n  isObject\n} = require('../../../util/is');\nclass ColumnCompiler_Oracledb extends ColumnCompiler_Oracle {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'nullable', 'comment'];\n    this._addCheckModifiers();\n  }\n  datetime(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({\n        useTz\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n  timestamp(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({\n        useTz\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n  checkRegex(regex, constraintName) {\n    return this._check(`REGEXP_LIKE(${this.formatter.wrap(this.getColumnName())},${this.client._escapeBinding(regex)})`, constraintName);\n  }\n  json() {\n    return `varchar2(4000) check (${this.formatter.columnize(this.getColumnName())} is json)`;\n  }\n  jsonb() {\n    return this.json();\n  }\n}\nColumnCompiler_Oracledb.prototype.time = 'timestamp with local time zone';\nColumnCompiler_Oracledb.prototype.uuid = function () {\n  let {\n    useBinaryUuid = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useBinaryUuid ? 'raw(16)' : 'char(36)';\n};\nmodule.exports = ColumnCompiler_Oracledb;","map":{"version":3,"names":["ColumnCompiler_Oracle","require","isObject","ColumnCompiler_Oracledb","constructor","arguments","modifiers","_addCheckModifiers","datetime","withoutTz","useTz","timestamp","checkRegex","regex","constraintName","_check","formatter","wrap","getColumnName","client","_escapeBinding","json","columnize","jsonb","prototype","time","uuid","useBinaryUuid","length","undefined","module","exports"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/oracledb/schema/oracledb-columncompiler.js"],"sourcesContent":["const ColumnCompiler_Oracle = require('../../oracle/schema/oracle-columncompiler');\nconst { isObject } = require('../../../util/is');\n\nclass ColumnCompiler_Oracledb extends ColumnCompiler_Oracle {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'nullable', 'comment'];\n    this._addCheckModifiers();\n  }\n\n  datetime(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n\n  timestamp(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n\n  checkRegex(regex, constraintName) {\n    return this._check(\n      `REGEXP_LIKE(${this.formatter.wrap(\n        this.getColumnName()\n      )},${this.client._escapeBinding(regex)})`,\n      constraintName\n    );\n  }\n\n  json() {\n    return `varchar2(4000) check (${this.formatter.columnize(\n      this.getColumnName()\n    )} is json)`;\n  }\n\n  jsonb() {\n    return this.json();\n  }\n}\n\nColumnCompiler_Oracledb.prototype.time = 'timestamp with local time zone';\nColumnCompiler_Oracledb.prototype.uuid = ({ useBinaryUuid = false } = {}) =>\n  useBinaryUuid ? 'raw(16)' : 'char(36)';\n\nmodule.exports = ColumnCompiler_Oracledb;\n"],"mappings":"AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,2CAA2C,CAAC;AAClF,MAAM;EAAEC;AAAS,CAAC,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAEhD,MAAME,uBAAuB,SAASH,qBAAqB,CAAC;EAC1DI,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC;IACrD,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B;EAEAC,QAAQA,CAACC,SAAS,EAAE;IAClB,IAAIC,KAAK;IACT,IAAIR,QAAQ,CAACO,SAAS,CAAC,EAAE;MACvB,CAAC;QAAEC;MAAM,CAAC,GAAGD,SAAS;IACxB,CAAC,MAAM;MACLC,KAAK,GAAG,CAACD,SAAS;IACpB;IACA,OAAOC,KAAK,GAAG,gCAAgC,GAAG,WAAW;EAC/D;EAEAC,SAASA,CAACF,SAAS,EAAE;IACnB,IAAIC,KAAK;IACT,IAAIR,QAAQ,CAACO,SAAS,CAAC,EAAE;MACvB,CAAC;QAAEC;MAAM,CAAC,GAAGD,SAAS;IACxB,CAAC,MAAM;MACLC,KAAK,GAAG,CAACD,SAAS;IACpB;IACA,OAAOC,KAAK,GAAG,gCAAgC,GAAG,WAAW;EAC/D;EAEAE,UAAUA,CAACC,KAAK,EAAEC,cAAc,EAAE;IAChC,OAAO,IAAI,CAACC,MAAM,CACf,eAAc,IAAI,CAACC,SAAS,CAACC,IAAI,CAChC,IAAI,CAACC,aAAa,CAAC,CACrB,CAAE,IAAG,IAAI,CAACC,MAAM,CAACC,cAAc,CAACP,KAAK,CAAE,GAAE,EACzCC,cACF,CAAC;EACH;EAEAO,IAAIA,CAAA,EAAG;IACL,OAAQ,yBAAwB,IAAI,CAACL,SAAS,CAACM,SAAS,CACtD,IAAI,CAACJ,aAAa,CAAC,CACrB,CAAE,WAAU;EACd;EAEAK,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACF,IAAI,CAAC,CAAC;EACpB;AACF;AAEAlB,uBAAuB,CAACqB,SAAS,CAACC,IAAI,GAAG,gCAAgC;AACzEtB,uBAAuB,CAACqB,SAAS,CAACE,IAAI,GAAG;EAAA,IAAC;IAAEC,aAAa,GAAG;EAAM,CAAC,GAAAtB,SAAA,CAAAuB,MAAA,QAAAvB,SAAA,QAAAwB,SAAA,GAAAxB,SAAA,MAAG,CAAC,CAAC;EAAA,OACtEsB,aAAa,GAAG,SAAS,GAAG,UAAU;AAAA;AAExCG,MAAM,CAACC,OAAO,GAAG5B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}