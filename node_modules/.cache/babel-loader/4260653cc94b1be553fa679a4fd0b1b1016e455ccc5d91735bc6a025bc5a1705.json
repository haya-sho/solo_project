{"ast":null,"code":"// PostgreSQL Column Compiler\n// -------\n\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst {\n  isObject\n} = require('../../../util/is');\nconst {\n  toNumber\n} = require('../../../util/helpers');\nconst commentEscapeRegex = /(?<!')'(?!')/g;\nclass ColumnCompiler_PG extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'comment'];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `bit(${column.length})` : 'bit';\n  }\n\n  // Create the column definition for an enum type.\n  // Using method \"2\" here: http://stackoverflow.com/a/10984951/525714\n  enu(allowed, options) {\n    options = options || {};\n    const values = options.useNative && options.existingType ? undefined : allowed.join(\"', '\");\n    if (options.useNative) {\n      let enumName = '';\n      const schemaName = options.schemaName || this.tableCompiler.schemaNameRaw;\n      if (schemaName) {\n        enumName += `\"${schemaName}\".`;\n      }\n      enumName += `\"${options.enumName}\"`;\n      if (!options.existingType) {\n        this.tableCompiler.unshiftQuery(`create type ${enumName} as enum ('${values}')`);\n      }\n      return enumName;\n    }\n    return `text check (${this.formatter.wrap(this.args[0])} in ('${values}'))`;\n  }\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n  json(jsonb) {\n    if (jsonb) this.client.logger.deprecate('json(true)', 'jsonb()');\n    return jsonColumn(this.client, jsonb);\n  }\n  jsonb() {\n    return jsonColumn(this.client, true);\n  }\n  checkRegex(regex, constraintName) {\n    return this._check(`${this.formatter.wrap(this.getColumnName())} ~ ${this.client._escapeBinding(regex)}`, constraintName);\n  }\n  datetime() {\n    let withoutTz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let precision = arguments.length > 1 ? arguments[1] : undefined;\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({\n        useTz,\n        precision\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    useTz = typeof useTz === 'boolean' ? useTz : true;\n    precision = precision !== undefined && precision !== null ? '(' + precision + ')' : '';\n    return `${useTz ? 'timestamptz' : 'timestamp'}${precision}`;\n  }\n  timestamp() {\n    let withoutTz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let precision = arguments.length > 1 ? arguments[1] : undefined;\n    return this.datetime(withoutTz, precision);\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    const escapedComment = comment ? `'${comment.replace(commentEscapeRegex, \"''\")}'` : 'NULL';\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(columnName) + ` is ${escapedComment}`);\n    }, comment);\n  }\n  increments() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      primaryKey: true\n    };\n    return 'serial' + (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '');\n  }\n  bigincrements() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      primaryKey: true\n    };\n    return 'bigserial' + (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '');\n  }\n  uuid() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      primaryKey: false\n    };\n    return 'uuid' + (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '');\n  }\n}\nColumnCompiler_PG.prototype.bigint = 'bigint';\nColumnCompiler_PG.prototype.binary = 'bytea';\nColumnCompiler_PG.prototype.bool = 'boolean';\nColumnCompiler_PG.prototype.double = 'double precision';\nColumnCompiler_PG.prototype.floating = 'real';\nColumnCompiler_PG.prototype.smallint = 'smallint';\nColumnCompiler_PG.prototype.tinyint = 'smallint';\nfunction jsonColumn(client, jsonb) {\n  if (!client.version || client.config.client === 'cockroachdb' || client.config.jsonbSupport === true || parseFloat(client.version) >= 9.2) {\n    return jsonb ? 'jsonb' : 'json';\n  }\n  return 'text';\n}\nmodule.exports = ColumnCompiler_PG;","map":{"version":3,"names":["ColumnCompiler","require","isObject","toNumber","commentEscapeRegex","ColumnCompiler_PG","constructor","client","tableCompiler","columnBuilder","modifiers","_addCheckModifiers","bit","column","length","enu","allowed","options","values","useNative","existingType","undefined","join","enumName","schemaName","schemaNameRaw","unshiftQuery","formatter","wrap","args","decimal","precision","scale","json","jsonb","logger","deprecate","jsonColumn","checkRegex","regex","constraintName","_check","getColumnName","_escapeBinding","datetime","withoutTz","arguments","useTz","timestamp","comment","columnName","defaults","escapedComment","replace","pushAdditional","pushQuery","tableName","increments","primaryKey","_canBeAddPrimaryKey","bigincrements","uuid","prototype","bigint","binary","bool","double","floating","smallint","tinyint","version","config","jsonbSupport","parseFloat","module","exports"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/postgres/schema/pg-columncompiler.js"],"sourcesContent":["// PostgreSQL Column Compiler\n// -------\n\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst { isObject } = require('../../../util/is');\nconst { toNumber } = require('../../../util/helpers');\nconst commentEscapeRegex = /(?<!')'(?!')/g;\n\nclass ColumnCompiler_PG extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'comment'];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `bit(${column.length})` : 'bit';\n  }\n\n  // Create the column definition for an enum type.\n  // Using method \"2\" here: http://stackoverflow.com/a/10984951/525714\n  enu(allowed, options) {\n    options = options || {};\n\n    const values =\n      options.useNative && options.existingType\n        ? undefined\n        : allowed.join(\"', '\");\n\n    if (options.useNative) {\n      let enumName = '';\n      const schemaName = options.schemaName || this.tableCompiler.schemaNameRaw;\n\n      if (schemaName) {\n        enumName += `\"${schemaName}\".`;\n      }\n\n      enumName += `\"${options.enumName}\"`;\n\n      if (!options.existingType) {\n        this.tableCompiler.unshiftQuery(\n          `create type ${enumName} as enum ('${values}')`\n        );\n      }\n\n      return enumName;\n    }\n    return `text check (${this.formatter.wrap(this.args[0])} in ('${values}'))`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  json(jsonb) {\n    if (jsonb) this.client.logger.deprecate('json(true)', 'jsonb()');\n    return jsonColumn(this.client, jsonb);\n  }\n\n  jsonb() {\n    return jsonColumn(this.client, true);\n  }\n\n  checkRegex(regex, constraintName) {\n    return this._check(\n      `${this.formatter.wrap(\n        this.getColumnName()\n      )} ~ ${this.client._escapeBinding(regex)}`,\n      constraintName\n    );\n  }\n\n  datetime(withoutTz = false, precision) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz, precision } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    useTz = typeof useTz === 'boolean' ? useTz : true;\n    precision =\n      precision !== undefined && precision !== null\n        ? '(' + precision + ')'\n        : '';\n\n    return `${useTz ? 'timestamptz' : 'timestamp'}${precision}`;\n  }\n\n  timestamp(withoutTz = false, precision) {\n    return this.datetime(withoutTz, precision);\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    const escapedComment = comment\n      ? `'${comment.replace(commentEscapeRegex, \"''\")}'`\n      : 'NULL';\n\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(columnName) +\n          ` is ${escapedComment}`\n      );\n    }, comment);\n  }\n\n  increments(options = { primaryKey: true }) {\n    return (\n      'serial' +\n      (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '')\n    );\n  }\n\n  bigincrements(options = { primaryKey: true }) {\n    return (\n      'bigserial' +\n      (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '')\n    );\n  }\n\n  uuid(options = { primaryKey: false }) {\n    return (\n      'uuid' +\n      (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '')\n    );\n  }\n}\n\nColumnCompiler_PG.prototype.bigint = 'bigint';\nColumnCompiler_PG.prototype.binary = 'bytea';\nColumnCompiler_PG.prototype.bool = 'boolean';\nColumnCompiler_PG.prototype.double = 'double precision';\nColumnCompiler_PG.prototype.floating = 'real';\nColumnCompiler_PG.prototype.smallint = 'smallint';\nColumnCompiler_PG.prototype.tinyint = 'smallint';\n\nfunction jsonColumn(client, jsonb) {\n  if (\n    !client.version ||\n    client.config.client === 'cockroachdb' ||\n    client.config.jsonbSupport === true ||\n    parseFloat(client.version) >= 9.2\n  ) {\n    return jsonb ? 'jsonb' : 'json';\n  }\n  return 'text';\n}\n\nmodule.exports = ColumnCompiler_PG;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}