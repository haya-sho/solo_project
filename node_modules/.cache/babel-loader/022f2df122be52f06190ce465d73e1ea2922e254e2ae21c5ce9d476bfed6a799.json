{"ast":null,"code":"var _jsxFileName = \"/Users/user/dig_develop/solo_project/src/components/List.jsx\",\n  _s = $RefreshSig$();\nimport \"../styles/list.css\";\nimport { React, useState, useEffect, useImperativeHandle } from \"react\";\n// import { allMenu, allMenuSet } from \"../App\";\n// import React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = process.env.NODE_ENV === \"production\" ?\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\"https://choose-lunch-app.onrender.com\" :\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n\"http://localhost:8080\";\nexport const List = props => {\n  _s();\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = async () => {\n    fetch(`${URL}/table`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(getData => {\n      allMenuSet(getData);\n      //allMenuをgetDataとする\n      //全てのオブジェクトが入った配列\n    });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n  console.log(allMenu);\n  const menuView = () => {\n    const elementsArr = [];\n    //allMenuはオブジェクトが入った配列\n    allMenu.forEach(value => {\n      if (value.isWaiting === true) {\n        console.log(value);\n        elementsArr.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list\",\n          children: [\"menu lists\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: value.menu\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, value.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    return elementsArr;\n  };\n  const resultElements = menuView();\n  return resultElements;\n};\n_s(List, \"6o4bYFDdHbJtUE97qHbX3RnpaK0=\");\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","useImperativeHandle","jsxDEV","_jsxDEV","URL","process","env","NODE_ENV","List","props","_s","allMenu","allMenuSet","getDataFunc","fetch","method","then","res","json","getData","console","log","menuView","elementsArr","forEach","value","isWaiting","push","className","children","menu","fileName","_jsxFileName","lineNumber","columnNumber","id","resultElements","_c","$RefreshReg$"],"sources":["/Users/user/dig_develop/solo_project/src/components/List.jsx"],"sourcesContent":["import \"../styles/list.css\";\nimport { React, useState, useEffect, useImperativeHandle } from \"react\";\n// import { allMenu, allMenuSet } from \"../App\";\n// import React, { useState, useEffect, useRef } from \"react\";\nconst URL =\n  process.env.NODE_ENV === \"production\"\n    ? //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n      \"https://choose-lunch-app.onrender.com\"\n    : //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n      \"http://localhost:8080\";\n\nexport const List = (props) => {\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = async () => {\n    fetch(`${URL}/table`, { method: \"GET\" })\n      .then((res) => res.json())\n      .then((getData) => {\n        allMenuSet(getData);\n        //allMenuをgetDataとする\n        //全てのオブジェクトが入った配列\n      });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n  console.log(allMenu);\n\n  const menuView = () => {\n    const elementsArr = [];\n    //allMenuはオブジェクトが入った配列\n    allMenu.forEach((value) => {\n      if (value.isWaiting === true) {\n        console.log(value);\n        elementsArr.push(\n          <div className=\"list\" key={value.id}>\n            menu lists\n            <ul>\n              <li>{value.menu}</li>\n            </ul>\n          </div>\n        );\n      }\n    });\n    return elementsArr;\n  };\n  const resultElements = menuView();\n  return resultElements;\n};\nexport default List;\n"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,SAASA,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,mBAAmB,QAAQ,OAAO;AACvE;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GACPC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;AACjC;AACA,uCAAuC;AACvC;AACA,uBAAuB;AAE7B,OAAO,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BC,KAAK,CAAE,GAAEV,GAAI,QAAO,EAAE;MAAEW,MAAM,EAAE;IAAM,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,OAAO,IAAK;MACjBP,UAAU,CAACO,OAAO,CAAC;MACnB;MACA;IACF,CAAC,CAAC;EACN,CAAC;;EAED;;EAEA;EACAnB,SAAS,CAAC,MAAM;IACda,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EACNO,OAAO,CAACC,GAAG,CAACV,OAAO,CAAC;EAEpB,MAAMW,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,WAAW,GAAG,EAAE;IACtB;IACAZ,OAAO,CAACa,OAAO,CAAEC,KAAK,IAAK;MACzB,IAAIA,KAAK,CAACC,SAAS,KAAK,IAAI,EAAE;QAC5BN,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;QAClBF,WAAW,CAACI,IAAI,eACdxB,OAAA;UAAKyB,SAAS,EAAC,MAAM;UAAAC,QAAA,GAAgB,YAEnC,eAAA1B,OAAA;YAAA0B,QAAA,eACE1B,OAAA;cAAA0B,QAAA,EAAKJ,KAAK,CAACK;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CAAC;QAAA,GAJoBT,KAAK,CAACU,EAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAK9B,CACP,CAAC;MACH;IACF,CAAC,CAAC;IACF,OAAOX,WAAW;EACpB,CAAC;EACD,MAAMa,cAAc,GAAGd,QAAQ,CAAC,CAAC;EACjC,OAAOc,cAAc;AACvB,CAAC;AAAC1B,EAAA,CA1CWF,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AA2CjB,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}