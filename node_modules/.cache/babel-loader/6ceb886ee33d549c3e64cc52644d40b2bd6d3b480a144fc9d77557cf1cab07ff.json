{"ast":null,"code":"// Oracle Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\nconst utils = require('../utils');\nconst Trigger = require('./internal/trigger');\nclass SchemaCompiler_Oracle extends SchemaCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    const renameTable = Trigger.renameTableAndAutoIncrementTrigger(this.client.logger, tableName, to);\n    this.pushQuery(renameTable);\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    this.pushQuery({\n      sql: 'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' + this.client.parameter(tableName, this.builder, this.bindingsHolder),\n      output(resp) {\n        return resp.length > 0;\n      }\n    });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const sql = `select COLUMN_NAME from ALL_TAB_COLUMNS ` + `where TABLE_NAME = ${this.client.parameter(tableName, this.builder, this.bindingsHolder)} ` + `and COLUMN_NAME = ${this.client.parameter(column, this.builder, this.bindingsHolder)}`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  }\n  dropSequenceIfExists(sequenceName) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    this.pushQuery(utils.wrapSqlWithCatch(`drop sequence ${prefix}${this.formatter.wrap(sequenceName)}`, -2289));\n  }\n  _dropRelatedSequenceIfExists(tableName) {\n    // removing the sequence that was possibly generated by increments() column\n    const sequenceName = utils.generateCombinedName(this.client.logger, 'seq', tableName);\n    this.dropSequenceIfExists(sequenceName);\n  }\n  dropTable(tableName) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    this.pushQuery(`drop table ${prefix}${this.formatter.wrap(tableName)}`);\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n  dropTableIfExists(tableName) {\n    this.dropObject(tableName, 'table');\n  }\n  dropViewIfExists(viewName) {\n    this.dropObject(viewName, 'view');\n  }\n  dropObject(objectName, type) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    let errorCode = -942;\n    if (type === 'materialized view') {\n      // https://stackoverflow.com/a/1801453\n      errorCode = -12003;\n    }\n    this.pushQuery(utils.wrapSqlWithCatch(`drop ${type} ${prefix}${this.formatter.wrap(objectName)}`, errorCode));\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(objectName);\n  }\n  refreshMaterializedView(viewName) {\n    return this.pushQuery({\n      sql: `BEGIN DBMS_MVIEW.REFRESH('${this.schemaNameRaw ? this.schemaNameRaw + '.' : ''}${viewName}'); END;`\n    });\n  }\n  dropMaterializedView(viewName) {\n    this._dropView(viewName, false, true);\n  }\n  dropMaterializedViewIfExists(viewName) {\n    this.dropObject(viewName, 'materialized view');\n  }\n}\nmodule.exports = SchemaCompiler_Oracle;","map":{"version":3,"names":["SchemaCompiler","require","utils","Trigger","SchemaCompiler_Oracle","constructor","arguments","renameTable","tableName","to","renameTableAndAutoIncrementTrigger","client","logger","pushQuery","hasTable","sql","parameter","builder","bindingsHolder","output","resp","length","hasColumn","column","dropSequenceIfExists","sequenceName","prefix","schema","wrapSqlWithCatch","formatter","wrap","_dropRelatedSequenceIfExists","generateCombinedName","dropTable","dropTableIfExists","dropObject","dropViewIfExists","viewName","objectName","type","errorCode","refreshMaterializedView","schemaNameRaw","dropMaterializedView","_dropView","dropMaterializedViewIfExists","module","exports"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/oracle/schema/oracle-compiler.js"],"sourcesContent":["// Oracle Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\nconst utils = require('../utils');\nconst Trigger = require('./internal/trigger');\n\nclass SchemaCompiler_Oracle extends SchemaCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    const renameTable = Trigger.renameTableAndAutoIncrementTrigger(\n      this.client.logger,\n      tableName,\n      to\n    );\n    this.pushQuery(renameTable);\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    this.pushQuery({\n      sql:\n        'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' +\n        this.client.parameter(tableName, this.builder, this.bindingsHolder),\n      output(resp) {\n        return resp.length > 0;\n      },\n    });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const sql =\n      `select COLUMN_NAME from ALL_TAB_COLUMNS ` +\n      `where TABLE_NAME = ${this.client.parameter(\n        tableName,\n        this.builder,\n        this.bindingsHolder\n      )} ` +\n      `and COLUMN_NAME = ${this.client.parameter(\n        column,\n        this.builder,\n        this.bindingsHolder\n      )}`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n\n  dropSequenceIfExists(sequenceName) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    this.pushQuery(\n      utils.wrapSqlWithCatch(\n        `drop sequence ${prefix}${this.formatter.wrap(sequenceName)}`,\n        -2289\n      )\n    );\n  }\n\n  _dropRelatedSequenceIfExists(tableName) {\n    // removing the sequence that was possibly generated by increments() column\n    const sequenceName = utils.generateCombinedName(\n      this.client.logger,\n      'seq',\n      tableName\n    );\n    this.dropSequenceIfExists(sequenceName);\n  }\n\n  dropTable(tableName) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    this.pushQuery(`drop table ${prefix}${this.formatter.wrap(tableName)}`);\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n\n  dropTableIfExists(tableName) {\n    this.dropObject(tableName, 'table');\n  }\n\n  dropViewIfExists(viewName) {\n    this.dropObject(viewName, 'view');\n  }\n\n  dropObject(objectName, type) {\n    const prefix = this.schema ? `\"${this.schema}\".` : '';\n    let errorCode = -942;\n    if (type === 'materialized view') {\n      // https://stackoverflow.com/a/1801453\n      errorCode = -12003;\n    }\n    this.pushQuery(\n      utils.wrapSqlWithCatch(\n        `drop ${type} ${prefix}${this.formatter.wrap(objectName)}`,\n        errorCode\n      )\n    );\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(objectName);\n  }\n\n  refreshMaterializedView(viewName) {\n    return this.pushQuery({\n      sql: `BEGIN DBMS_MVIEW.REFRESH('${\n        this.schemaNameRaw ? this.schemaNameRaw + '.' : ''\n      }${viewName}'); END;`,\n    });\n  }\n\n  dropMaterializedView(viewName) {\n    this._dropView(viewName, false, true);\n  }\n\n  dropMaterializedViewIfExists(viewName) {\n    this.dropObject(viewName, 'materialized view');\n  }\n}\n\nmodule.exports = SchemaCompiler_Oracle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}