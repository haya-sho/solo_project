{"ast":null,"code":"// MySQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst {\n  isObject\n} = require('../../../util/is');\nconst {\n  toNumber\n} = require('../../../util/helpers');\nconst commentEscapeRegex = /(?<!\\\\)'/g;\nclass ColumnCompiler_MySQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['unsigned', 'nullable', 'defaultTo', 'comment', 'collate', 'first', 'after'];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // ------\n\n  double(precision, scale) {\n    if (!precision) return 'double';\n    return `double(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n  integer(length) {\n    length = length ? `(${toNumber(length, 11)})` : '';\n    return `int${length}`;\n  }\n  tinyint(length) {\n    length = length ? `(${toNumber(length, 1)})` : '';\n    return `tinyint${length}`;\n  }\n  text(column) {\n    switch (column) {\n      case 'medium':\n      case 'mediumtext':\n        return 'mediumtext';\n      case 'long':\n      case 'longtext':\n        return 'longtext';\n      default:\n        return 'text';\n    }\n  }\n  mediumtext() {\n    return this.text('medium');\n  }\n  longtext() {\n    return this.text('long');\n  }\n  enu(allowed) {\n    return `enum('${allowed.join(\"', '\")}')`;\n  }\n  datetime(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n    return typeof precision === 'number' ? `datetime(${precision})` : 'datetime';\n  }\n  timestamp(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n    return typeof precision === 'number' ? `timestamp(${precision})` : 'timestamp';\n  }\n  time(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n    return typeof precision === 'number' ? `time(${precision})` : 'time';\n  }\n  bit(length) {\n    return length ? `bit(${toNumber(length)})` : 'bit';\n  }\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'blob';\n  }\n  json() {\n    return 'json';\n  }\n  jsonb() {\n    return 'json';\n  }\n\n  // Modifiers\n  // ------\n\n  defaultTo(value) {\n    // MySQL defaults to null by default, but breaks down if you pass it explicitly\n    // Note that in MySQL versions up to 5.7, logic related to updating\n    // timestamps when no explicit value is passed is quite insane - https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp\n    if (value === null || value === undefined) {\n      return;\n    }\n    if ((this.type === 'json' || this.type === 'jsonb') && isObject(value)) {\n      // Default value for json will work only it is an expression\n      return `default ('${JSON.stringify(value)}')`;\n    }\n    const defaultVal = super.defaultTo.apply(this, arguments);\n    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {\n      return defaultVal;\n    }\n    return '';\n  }\n  unsigned() {\n    return 'unsigned';\n  }\n  comment(comment) {\n    if (comment && comment.length > 255) {\n      this.client.logger.warn('Your comment is longer than the max comment length for MySQL');\n    }\n    return comment && `comment '${comment.replace(commentEscapeRegex, \"\\\\'\")}'`;\n  }\n  first() {\n    return 'first';\n  }\n  after(column) {\n    return `after ${this.formatter.wrap(column)}`;\n  }\n  collate(collation) {\n    return collation && `collate '${collation}'`;\n  }\n  checkRegex(regex, constraintName) {\n    return this._check(`${this.formatter.wrap(this.getColumnName())} REGEXP ${this.client._escapeBinding(regex)}`, constraintName);\n  }\n  increments() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      primaryKey: true\n    };\n    return 'int unsigned not null' + (\n    // In MySQL autoincrement are always a primary key. If you already have a primary key, we\n    // initialize this column as classic int column then modify it later in table compiler\n    this.tableCompiler._canBeAddPrimaryKey(options) ? ' auto_increment primary key' : '');\n  }\n  bigincrements() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      primaryKey: true\n    };\n    return 'bigint unsigned not null' + (\n    // In MySQL autoincrement are always a primary key. If you already have a primary key, we\n    // initialize this column as classic int column then modify it later in table compiler\n    this.tableCompiler._canBeAddPrimaryKey(options) ? ' auto_increment primary key' : '');\n  }\n}\nColumnCompiler_MySQL.prototype.bigint = 'bigint';\nColumnCompiler_MySQL.prototype.mediumint = 'mediumint';\nColumnCompiler_MySQL.prototype.smallint = 'smallint';\nmodule.exports = ColumnCompiler_MySQL;","map":{"version":3,"names":["ColumnCompiler","require","isObject","toNumber","commentEscapeRegex","ColumnCompiler_MySQL","constructor","client","tableCompiler","columnBuilder","modifiers","_addCheckModifiers","double","precision","scale","integer","length","tinyint","text","column","mediumtext","longtext","enu","allowed","join","datetime","timestamp","time","bit","binary","json","jsonb","defaultTo","value","undefined","type","JSON","stringify","defaultVal","apply","arguments","indexOf","unsigned","comment","logger","warn","replace","first","after","formatter","wrap","collate","collation","checkRegex","regex","constraintName","_check","getColumnName","_escapeBinding","increments","options","primaryKey","_canBeAddPrimaryKey","bigincrements","prototype","bigint","mediumint","smallint","module","exports"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/mysql/schema/mysql-columncompiler.js"],"sourcesContent":["// MySQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst { isObject } = require('../../../util/is');\nconst { toNumber } = require('../../../util/helpers');\n\nconst commentEscapeRegex = /(?<!\\\\)'/g;\n\nclass ColumnCompiler_MySQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = [\n      'unsigned',\n      'nullable',\n      'defaultTo',\n      'comment',\n      'collate',\n      'first',\n      'after',\n    ];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // ------\n\n  double(precision, scale) {\n    if (!precision) return 'double';\n    return `double(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    length = length ? `(${toNumber(length, 11)})` : '';\n    return `int${length}`;\n  }\n\n  tinyint(length) {\n    length = length ? `(${toNumber(length, 1)})` : '';\n    return `tinyint${length}`;\n  }\n\n  text(column) {\n    switch (column) {\n      case 'medium':\n      case 'mediumtext':\n        return 'mediumtext';\n      case 'long':\n      case 'longtext':\n        return 'longtext';\n      default:\n        return 'text';\n    }\n  }\n\n  mediumtext() {\n    return this.text('medium');\n  }\n\n  longtext() {\n    return this.text('long');\n  }\n\n  enu(allowed) {\n    return `enum('${allowed.join(\"', '\")}')`;\n  }\n\n  datetime(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number'\n      ? `datetime(${precision})`\n      : 'datetime';\n  }\n\n  timestamp(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number'\n      ? `timestamp(${precision})`\n      : 'timestamp';\n  }\n\n  time(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number' ? `time(${precision})` : 'time';\n  }\n\n  bit(length) {\n    return length ? `bit(${toNumber(length)})` : 'bit';\n  }\n\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'blob';\n  }\n\n  json() {\n    return 'json';\n  }\n\n  jsonb() {\n    return 'json';\n  }\n\n  // Modifiers\n  // ------\n\n  defaultTo(value) {\n    // MySQL defaults to null by default, but breaks down if you pass it explicitly\n    // Note that in MySQL versions up to 5.7, logic related to updating\n    // timestamps when no explicit value is passed is quite insane - https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp\n    if (value === null || value === undefined) {\n      return;\n    }\n    if ((this.type === 'json' || this.type === 'jsonb') && isObject(value)) {\n      // Default value for json will work only it is an expression\n      return `default ('${JSON.stringify(value)}')`;\n    }\n    const defaultVal = super.defaultTo.apply(this, arguments);\n    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {\n      return defaultVal;\n    }\n    return '';\n  }\n\n  unsigned() {\n    return 'unsigned';\n  }\n\n  comment(comment) {\n    if (comment && comment.length > 255) {\n      this.client.logger.warn(\n        'Your comment is longer than the max comment length for MySQL'\n      );\n    }\n    return comment && `comment '${comment.replace(commentEscapeRegex, \"\\\\'\")}'`;\n  }\n\n  first() {\n    return 'first';\n  }\n\n  after(column) {\n    return `after ${this.formatter.wrap(column)}`;\n  }\n\n  collate(collation) {\n    return collation && `collate '${collation}'`;\n  }\n\n  checkRegex(regex, constraintName) {\n    return this._check(\n      `${this.formatter.wrap(\n        this.getColumnName()\n      )} REGEXP ${this.client._escapeBinding(regex)}`,\n      constraintName\n    );\n  }\n\n  increments(options = { primaryKey: true }) {\n    return (\n      'int unsigned not null' +\n      // In MySQL autoincrement are always a primary key. If you already have a primary key, we\n      // initialize this column as classic int column then modify it later in table compiler\n      (this.tableCompiler._canBeAddPrimaryKey(options)\n        ? ' auto_increment primary key'\n        : '')\n    );\n  }\n\n  bigincrements(options = { primaryKey: true }) {\n    return (\n      'bigint unsigned not null' +\n      // In MySQL autoincrement are always a primary key. If you already have a primary key, we\n      // initialize this column as classic int column then modify it later in table compiler\n      (this.tableCompiler._canBeAddPrimaryKey(options)\n        ? ' auto_increment primary key'\n        : '')\n    );\n  }\n}\n\nColumnCompiler_MySQL.prototype.bigint = 'bigint';\nColumnCompiler_MySQL.prototype.mediumint = 'mediumint';\nColumnCompiler_MySQL.prototype.smallint = 'smallint';\n\nmodule.exports = ColumnCompiler_MySQL;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}