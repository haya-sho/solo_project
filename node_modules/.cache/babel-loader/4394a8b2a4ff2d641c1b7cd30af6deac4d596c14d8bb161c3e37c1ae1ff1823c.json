{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDialectByNameOrAlias = void 0;\nconst {\n  resolveClientNameWithAliases\n} = require('../util/helpers');\nconst dbNameToDialectLoader = Object.freeze({\n  'better-sqlite3': () => require('./better-sqlite3'),\n  cockroachdb: () => require('./cockroachdb'),\n  mssql: () => require('./mssql'),\n  mysql: () => require('./mysql'),\n  mysql2: () => require('./mysql2'),\n  oracle: () => require('./oracle'),\n  oracledb: () => require('./oracledb'),\n  pgnative: () => require('./pgnative'),\n  postgres: () => require('./postgres'),\n  redshift: () => require('./redshift'),\n  sqlite3: () => require('./sqlite3')\n});\n/**\r\n * Gets the Dialect object with the given client name or throw an\r\n * error if not found.\r\n *\r\n * NOTE: This is a replacement for prior practice of doing dynamic\r\n * string construction for imports of Dialect objects.\r\n */\nfunction getDialectByNameOrAlias(clientName) {\n  const resolvedClientName = resolveClientNameWithAliases(clientName);\n  const dialectLoader = dbNameToDialectLoader[resolvedClientName];\n  if (!dialectLoader) {\n    throw new Error(`Invalid clientName given: ${clientName}`);\n  }\n  return dialectLoader();\n}\nexports.getDialectByNameOrAlias = getDialectByNameOrAlias;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDialectByNameOrAlias","resolveClientNameWithAliases","require","dbNameToDialectLoader","freeze","better-sqlite3","cockroachdb","mssql","mysql","mysql2","oracle","oracledb","pgnative","postgres","redshift","sqlite3","clientName","resolvedClientName","dialectLoader","Error"],"sources":["/Users/user/dig_develop/solo_project/node_modules/knex/lib/dialects/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getDialectByNameOrAlias = void 0;\r\nconst { resolveClientNameWithAliases } = require('../util/helpers');\r\nconst dbNameToDialectLoader = Object.freeze({\r\n    'better-sqlite3': () => require('./better-sqlite3'),\r\n    cockroachdb: () => require('./cockroachdb'),\r\n    mssql: () => require('./mssql'),\r\n    mysql: () => require('./mysql'),\r\n    mysql2: () => require('./mysql2'),\r\n    oracle: () => require('./oracle'),\r\n    oracledb: () => require('./oracledb'),\r\n    pgnative: () => require('./pgnative'),\r\n    postgres: () => require('./postgres'),\r\n    redshift: () => require('./redshift'),\r\n    sqlite3: () => require('./sqlite3'),\r\n});\r\n/**\r\n * Gets the Dialect object with the given client name or throw an\r\n * error if not found.\r\n *\r\n * NOTE: This is a replacement for prior practice of doing dynamic\r\n * string construction for imports of Dialect objects.\r\n */\r\nfunction getDialectByNameOrAlias(clientName) {\r\n    const resolvedClientName = resolveClientNameWithAliases(clientName);\r\n    const dialectLoader = dbNameToDialectLoader[resolvedClientName];\r\n    if (!dialectLoader) {\r\n        throw new Error(`Invalid clientName given: ${clientName}`);\r\n    }\r\n    return dialectLoader();\r\n}\r\nexports.getDialectByNameOrAlias = getDialectByNameOrAlias;\r\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAM;EAAEC;AAA6B,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACnE,MAAMC,qBAAqB,GAAGP,MAAM,CAACQ,MAAM,CAAC;EACxC,gBAAgB,EAAEC,CAAA,KAAMH,OAAO,CAAC,kBAAkB,CAAC;EACnDI,WAAW,EAAEA,CAAA,KAAMJ,OAAO,CAAC,eAAe,CAAC;EAC3CK,KAAK,EAAEA,CAAA,KAAML,OAAO,CAAC,SAAS,CAAC;EAC/BM,KAAK,EAAEA,CAAA,KAAMN,OAAO,CAAC,SAAS,CAAC;EAC/BO,MAAM,EAAEA,CAAA,KAAMP,OAAO,CAAC,UAAU,CAAC;EACjCQ,MAAM,EAAEA,CAAA,KAAMR,OAAO,CAAC,UAAU,CAAC;EACjCS,QAAQ,EAAEA,CAAA,KAAMT,OAAO,CAAC,YAAY,CAAC;EACrCU,QAAQ,EAAEA,CAAA,KAAMV,OAAO,CAAC,YAAY,CAAC;EACrCW,QAAQ,EAAEA,CAAA,KAAMX,OAAO,CAAC,YAAY,CAAC;EACrCY,QAAQ,EAAEA,CAAA,KAAMZ,OAAO,CAAC,YAAY,CAAC;EACrCa,OAAO,EAAEA,CAAA,KAAMb,OAAO,CAAC,WAAW;AACtC,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuBA,CAACgB,UAAU,EAAE;EACzC,MAAMC,kBAAkB,GAAGhB,4BAA4B,CAACe,UAAU,CAAC;EACnE,MAAME,aAAa,GAAGf,qBAAqB,CAACc,kBAAkB,CAAC;EAC/D,IAAI,CAACC,aAAa,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,6BAA4BH,UAAW,EAAC,CAAC;EAC9D;EACA,OAAOE,aAAa,CAAC,CAAC;AAC1B;AACApB,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}