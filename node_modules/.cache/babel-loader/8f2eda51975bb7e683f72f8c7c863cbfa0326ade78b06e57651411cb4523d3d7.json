{"ast":null,"code":"var _jsxFileName = \"/Users/user/dig_develop/solo_project/src/components/List.jsx\",\n  _s = $RefreshSig$();\nimport \"../styles/list.css\";\nimport { React, useState, useEffect } from \"react\";\n// import React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = process.env.NODE_ENV === \"production\" ?\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\"https://choose-lunch-app.onrender.com\" :\n//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n\"http://localhost:8080\";\nexport const dataSort = () => {};\nexport const List = props => {\n  _s();\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = () => {\n    fetch(`${URL}/table`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(getData => {\n      allMenuSet(getData);\n      //allMenuをgetDataとする\n      //全てのオブジェクトが入った配列\n    });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n  console.log(allMenu);\n  return;\n  //allMenuはオブジェクトが入った配列\n  allMenu.forEach(value => {\n    if (value.isWaiting === true) {\n      console.log(value);\n      /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list\",\n          children: [\"menu lists\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: value.menu\n            }, value.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    }\n  });\n};\n_s(List, \"6o4bYFDdHbJtUE97qHbX3RnpaK0=\");\n_c = List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","process","env","NODE_ENV","dataSort","List","props","_s","allMenu","allMenuSet","getDataFunc","fetch","method","then","res","json","getData","console","log","forEach","value","isWaiting","children","className","menu","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/dig_develop/solo_project/src/components/List.jsx"],"sourcesContent":["import \"../styles/list.css\";\nimport { React, useState, useEffect } from \"react\";\n// import React, { useState, useEffect, useRef } from \"react\";\nconst URL =\n  process.env.NODE_ENV === \"production\"\n    ? //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n      \"https://choose-lunch-app.onrender.com\"\n    : //■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ここのリンクを変更すること■■■■■■■■■■■■■■■■■■■■■■\n      \"http://localhost:8080\";\n\nexport const dataSort = () => {};\n\nexport const List = (props) => {\n  const [allMenu, allMenuSet] = useState([]);\n\n  //この関数を実行すると指定したURLにGETリクエストを送る\n  const getDataFunc = () => {\n    fetch(`${URL}/table`, { method: \"GET\" })\n      .then((res) => res.json())\n      .then((getData) => {\n        allMenuSet(getData);\n        //allMenuをgetDataとする\n        //全てのオブジェクトが入った配列\n      });\n  };\n\n  // let patchCheck;\n\n  //これを入れないと永遠にループする\n  useEffect(() => {\n    getDataFunc();\n  }, []);\n  console.log(allMenu);\n\n  return;\n  //allMenuはオブジェクトが入った配列\n  allMenu.forEach((value) => {\n    if (value.isWaiting === true) {\n      console.log(value);\n      <>\n        <div className=\"list\">\n          menu lists\n          <ul>\n            <li key={value.id}>{value.menu}</li>\n          </ul>\n        </div>\n      </>;\n    }\n  });\n};\n"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,SAASA,KAAK,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,GAAG,GACPC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;AACjC;AACA,uCAAuC;AACvC;AACA,uBAAuB;AAE7B,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,CAAC,CAAC;AAEhC,OAAO,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxBC,KAAK,CAAE,GAAEX,GAAI,QAAO,EAAE;MAAEY,MAAM,EAAE;IAAM,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,OAAO,IAAK;MACjBP,UAAU,CAACO,OAAO,CAAC;MACnB;MACA;IACF,CAAC,CAAC;EACN,CAAC;;EAED;;EAEA;EACArB,SAAS,CAAC,MAAM;IACde,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EACNO,OAAO,CAACC,GAAG,CAACV,OAAO,CAAC;EAEpB;EACA;EACAA,OAAO,CAACW,OAAO,CAAEC,KAAK,IAAK;IACzB,IAAIA,KAAK,CAACC,SAAS,KAAK,IAAI,EAAE;MAC5BJ,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MAClB,aAAAvB,OAAA,CAAAE,SAAA;QAAAuB,QAAA,eACEzB,OAAA;UAAK0B,SAAS,EAAC,MAAM;UAAAD,QAAA,GAAC,YAEpB,eAAAzB,OAAA;YAAAyB,QAAA,eACEzB,OAAA;cAAAyB,QAAA,EAAoBF,KAAK,CAACI;YAAI,GAArBJ,KAAK,CAACK,EAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAkB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC,gBACN,CAAC;IACL;EACF,CAAC,CAAC;AACJ,CAAC;AAACtB,EAAA,CArCWF,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}